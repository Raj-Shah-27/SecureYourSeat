
-- 1. Retrieve all customers who booked tickets for movies with a rating higher than the average rating of all movies.
SELECT DISTINCT c.*
FROM customer c
NATURAL JOIN payment p
NATURAL JOIN eticket e
NATURAL JOIN showseat ss
NATURAL JOIN shows s
NATURAL JOIN movie m
WHERE m.rating > (SELECT AVG(rating) FROM movie);


-- 2. List all cinema halls along with the percentage of seats booked for each show scheduled.
SELECT h.*, 
    (COUNT(s.ticketno) * 100.0 / h.totalSeats) AS percentage_booked
FROM cinemaHall h
JOIN shows sh ON h.hallid = sh.hallid
JOIN showseat s ON sh.showid = s.showid
GROUP BY h.hallid;

-- 3. Show all movies along with the average rating, and list only those movies where the average rating exceeds the average rating of all movies.
SELECT m.*, AVG(m.rating) AS avg_rating
FROM movie m
GROUP BY m.cbfcno
HAVING AVG(m.rating) > (SELECT AVG(rating) FROM movie);

-- 4. Display the top 3 cities with the highest revenue, along with the total revenue generated from ticket bookings in each city.
SELECT c.name AS city_name, SUM(p.amount) AS total_revenue
FROM city c
JOIN cinema ci ON c.cityid = ci.cityid
JOIN cinemaHall h ON ci.cinemaid = h.cinemaid
JOIN shows s ON h.hallid = s.hallid
JOIN showseat ss ON s.showid = ss.showid
JOIN eticket e ON ss.ticketno = e.ticketno
JOIN payment p ON e.paymentid = p.paymentid
GROUP BY c.name
ORDER BY total_revenue DESC
LIMIT 3;

-- 5. Find all customers who booked tickets for shows scheduled on weekdays and paid using a credit card.
SELECT DISTINCT c.*
FROM customer c
JOIN payment p ON c.uid = p.uid
JOIN eticket e ON p.paymentid = e.paymentid
JOIN showseat ss ON e.ticketno = ss.ticketno
JOIN shows s ON ss.showid = s.showid
WHERE EXTRACT(DOW FROM s.day) IN (1, 2, 3, 4, 5) AND p.mode = 'Credit Card';

-- 6. Display the movie titles along with the number of shows scheduled for each.
SELECT m.title, COUNT(*) AS show_count
FROM movie m
NATURAL JOIN shows s
GROUP BY m.title;

-- 7. Show the top 5 customers who spent the most on ticket bookings, along with the total
--amount spent by each customer.
SELECT c.uid, c.fname, c.lname, SUM(p.amount) AS total_amount_spent
FROM customer c
NATURAL JOIN eticket e
NATURAL JOIN payment p
GROUP BY c.uid, c.fname, c.lname
ORDER BY total_amount_spent DESC
LIMIT 5;

-- 8. Display the cinema halls with the highest and lowest booking rates (percentage of booked
--seats) for shows scheduled.
--Highest
SELECT ch.hallid,
(COUNT(DISTINCT ss.showseatid) / ch.totalSeats::numeric) * 100 AS percentage_booked
FROM cinemaHall ch
NATURAL JOIN shows s
NATURAL JOIN showseat ss
WHERE ss.status='SOLD'
GROUP BY ch.hallid, ch.totalSeats
ORDER BY percentage_booked DESC
LIMIT 1;
--Lowest
SELECT ch.hallid,
(COUNT(DISTINCT ss.showseatid) / ch.totalSeats::numeric) * 100 AS percentage_booked
FROM cinemaHall ch
NATURAL JOIN shows s
NATURAL JOIN showseat ss
WHERE ss.status='SOLD'
GROUP BY ch.hallid, ch.totalSeats
ORDER BY percentage_booked ASC
LIMIT 1;

-- 9 Retrieve all customers who booked tickets for shows where the booking date is within a
--week of the show date.
SELECT DISTINCT c.*
FROM customer c
NATURAL JOIN eticket e
NATURAL JOIN payment
NATURAL JOIN shows s
WHERE s.day - payment.timing <= INTERVAL '7 days';

-- 10. Display the total number of seats booked for each show.
SELECT s.showid, COUNT(ss.ticketno) AS total_seats_booked
FROM shows s
JOIN showseat ss ON s.showid = ss.showid
GROUP BY s.showid;

-- 11. Find the total revenue generated by each cinema.
SELECT c.name AS cinema_name, SUM(p.amount) AS total_revenue
FROM cinema c
JOIN cinemaHall ch ON c.cinemaid = ch.cinemaid
JOIN shows s ON ch.hallid = s.hallid
JOIN showseat ss ON s.showid = ss.showid
JOIN eticket e ON ss.ticketno = e.ticketno
JOIN payment p ON e.paymentid = p.paymentid
GROUP BY c.name;

-- 12. Display the average rating of movies in each city
SELECT c.name AS city_name, AVG(m.rating) AS avg_rating
FROM cinemaHall h
JOIN cinema c ON h.cinemaid = c.cinemaid
JOIN shows s ON h.hallid = s.hallid
JOIN movie m ON s.cbfcno = m.cbfcno
JOIN city ci ON ci.cityid = c.cityid
GROUP BY c.name;

-- 13.Find the most popular movie genre among customers
SELECT g.genre, COUNT(*) AS genre_count
FROM genres g
JOIN movie m ON g.cbfcno = m.cbfcno
JOIN shows s ON m.cbfcno = s.cbfcno
JOIN showseat ss ON s.showid = ss.showid
JOIN eticket e ON ss.ticketno = e.ticketno
GROUP BY g.genre
ORDER BY genre_count DESC
LIMIT 1;

-- 14. Show all cinema halls with their total seats and the number of available seats for each show.
SELECT h.hallid, h.totalSeats, s.showid, (h.totalSeats - COUNT(ss.ticketno)) AS available_seats
FROM cinemaHall h
LEFT JOIN shows s ON h.hallid = s.hallid
LEFT JOIN showseat ss ON s.showid = ss.showid
GROUP BY h.hallid, h.totalSeats, s.showid;

-- 15. Find the average age of customers who booked tickets for shows in a specific city.
SELECT AVG(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM c.dob)) AS avg_age
FROM customer c
NATURAL JOIN payment p
NATURAL JOIN eticket e
NATURAL JOIN showseat ss
NATURAL JOIN shows s
NATURAL JOIN cinemaHall h
NATURAL JOIN cinema cty
WHERE cty.cityid = 'MUM';

-- 16. Retrieve all customers who booked tickets for shows with a runtime exceeding a certain threshold.
SELECT DISTINCT c.*
FROM customer c
JOIN payment p ON c.uid = p.uid
JOIN eticket e ON p.paymentid = e.paymentid
JOIN showseat ss ON e.ticketno = ss.ticketno
JOIN shows s ON ss.showid = s.showid
JOIN movie m ON s.cbfcno = m.cbfcno
WHERE m.runtime > 100;

-- 17 List all cinema halls along with the average percentage of seats booked for shows
-- scheduled on weekdays.
SELECT ch.hallid,
        AVG(booked_seats * 100.0 / ch.totalSeats) AS avg_percentage_booked
FROM cinemaHall ch
JOIN (
    SELECT s.hallid, s.showid, COUNT(DISTINCT ss.showseatid) AS booked_seats
    FROM shows s
    JOIN showseat ss ON s.showid = ss.showid
    WHERE EXTRACT(DOW FROM s.day) BETWEEN 1 AND 5 -- Weekdays (Monday to Friday)
    GROUP BY s.hallid, s.showid
) AS booked_per_show ON ch.hallid = booked_per_show.hallid
GROUP BY ch.hallid, ch.totalSeats;

-- 18 Show the top 3 customers who booked tickets for the most number of different movies,
-- along with the count of movies each customer booked.
SELECT c.uid, c.fname, c.lname, COUNT(DISTINCT m.cbfcno) AS movie_count
FROM customer c
NATURAL JOIN eticket e
NATURAL JOIN shows s
NATURAL JOIN movie m
GROUP BY c.uid, c.fname, c.lname
ORDER BY movie_count DESC
LIMIT 3;

-- 19  Retrieve all customers who have booked tickets along with the movie titles 
-- they booked
SELECT c.*, m.title
FROM customer as c
natural join payment
NATURAL JOIN eticket as e
Natural join showseat
NATURAL JOIN shows as s
NATURAL JOIN movie as m;

-- 20 Show all shows scheduled for a specific cinema hall on a given date.
SELECT s.*
FROM shows s
NATURAL JOIN cinemaHall ch
WHERE ch.hallid = 'INOX0102' AND s.day = '2024-04-19';